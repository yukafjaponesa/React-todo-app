{"version":3,"sources":["components/TodoItem.js","components/Timer.js","App.js","index.js"],"names":["TodoItem","props","completedStyle","fontStyle","color","textDecoration","buttontext","isEdited","className","type","checked","item","completed","onChange","handleChange","id","style","text","deadline","value","e","updateInput","target","updateInputDeadline","onClick","deleteItem","editItem","Timer","useState","count","useEffect","intervalId","setInterval","clearInterval","App","state","todos","window","localStorage","getItem","JSON","parse","uuidv4","newItem","editing","bind","addTodo","updateItem","updateDeadline","handleFormSubmit","this","setState","prevState","updatedTodos","map","todo","setItem","stringify","newTodo","length","newTodos","concat","console","log","filteredItems","filter","preventDefault","localData","result","deadlineData","todoItems","key","onSubmit","name","placeholder","htmlFor","min","max","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eef224c9.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction TodoItem(props) {\r\n  const completedStyle = {\r\n      fontStyle: 'italic',\r\n      color: '#cdcdcd',\r\n      textDecoration: 'line-through'\r\n  }\r\n\r\n  const buttontext = (props.isEdited ? 'Update' : 'Edit');\r\n\r\n    return (\r\n        <div className=\"todo-item\">\r\n              <input\r\n                  type=\"checkbox\"\r\n                  checked={props.item.completed}\r\n                  onChange={() => props.handleChange(props.item.id)}\r\n              />\r\n\r\n              {!props.isEdited && (\r\n                <div>\r\n                  <p style={props.item.completed ? completedStyle: null}>{props.item.text}</p>\r\n                  <p style={props.item.completed ? completedStyle: null}>{props.item.deadline}</p>\r\n                </div>\r\n              )}\r\n\r\n            <div className=\"editable-text-dlt-edit-btn\">\r\n              {props.isEdited && (\r\n                <div>\r\n\r\n                  <div className=\"editable-text-box\">\r\n                    <input\r\n                      type=\"text\"\r\n                      id={props.item.id}\r\n                      value={props.item.text}\r\n                      onChange={(e) => {\r\n                        props.updateInput(e.target.value, props.item.id)\r\n                      }}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"editable-text-box\">\r\n                    <input\r\n                      type=\"date\"\r\n                      id={props.item.id}\r\n                      value={props.item.deadline}\r\n                      onChange={(e) => {\r\n                        props.updateInputDeadline(e.target.value, props.item.id)\r\n                      }}\r\n                    />\r\n                  </div>\r\n\r\n                </div>\r\n              )}\r\n\r\n            <div className=\"delete-btn\">\r\n              <input type=\"button\" value=\"Delete\" onClick={() => {\r\n                props.deleteItem(props.item.id)\r\n              }}/>\r\n            </div>\r\n\r\n            <div className=\"edit-btn\">\r\n              <input type=\"button\" value={buttontext} onClick={() => {\r\n                if(props.isEdited) {\r\n                  props.editItem(false)\r\n                }else {\r\n                  props.editItem(props.item.id)\r\n                }\r\n              }}/>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem\r\n","import React, {useState, useEffect} from \"react\"\r\n\r\nconst Timer = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      // setCount(prevCount => prevCount + 1)\r\n    }, 1000)\r\n    return () => clearInterval(intervalId)\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <p>You have used {count} seconds on this website.</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Timer\r\n","/*\r\nimport React from \"react\"\r\nimport TodoItem from \"./components/TodoItem\"\r\nimport todosData from \"./components/todosData\"\r\nimport Timer from \"./components/Timer\"\r\n//import FlipMove from \"react-flip-move\"\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            todos: todosData,\r\n            //setTodos: todosData,\r\n            newItem: \"\",\r\n            deadline: \"\",\r\n            editing: false\r\n        }\r\n\r\n        // const [todos, setTodos] = useState(todosDatas);\r\n        // this.setTodos = setTodos;\r\n        // this.todos = todos;\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.addTodo = this.addTodo.bind(this)\r\n        this.updateInput = this.updateInput.bind(this)\r\n        this.deleteItem = this.deleteItem.bind(this)\r\n        this.updateItem = this.updateItem.bind(this)\r\n        this.updateDeadline = this.updateDeadline.bind(this)\r\n        this.updateInputDeadline = this.updateInputDeadline.bind(this)\r\n        this.editItem = this.editItem.bind(this)\r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this)\r\n    }\r\n\r\n    handleChange(id) {\r\n      this.setState((prevState) => {\r\n        const updatedTodos = prevState.todos.map((todo) => {\r\n          if (todo.id === id) {\r\n            return { ...todo, completed: !todo.completed };\r\n          } else {\r\n            return todo;\r\n          }\r\n        });\r\n        return { todos: updatedTodos };\r\n      });\r\n    }\r\n\r\n    addTodo(e) {\r\n      //console.log(\"add todo\");\r\n      //e.preventDefault();\r\n      const newTodo = {\r\n        id: this.state.todos.length + 1,\r\n        text: this.state.newItem,  // text should match with the input box\r\n        completed: false,\r\n        deadline: this.state.deadline\r\n      }\r\n      const newTodos = this.state.todos.concat([newTodo]);\r\n      this.setState({\r\n        todos: newTodos,\r\n        newItem: \"\",\r\n        deadline: \"\",\r\n        editing: false\r\n      })\r\n    }\r\n\r\n    updateInput(value, id) {\r\n        this.setState((prevState) => {\r\n        const updatedTodos = prevState.todos.map((todo) => {\r\n          if(todo.id === id) {\r\n            return {...todo, text: value}\r\n          }else {\r\n            return todo;\r\n          }\r\n        })\r\n        return {todos: updatedTodos}\r\n      })\r\n    }\r\n\r\n    updateInputDeadline(value, id) {\r\n      //console.log(value, id);\r\n        this.setState((prevState) => {\r\n        const updatedTodos = prevState.todos.map((todo) => {\r\n          if(todo.id === id) {\r\n            console.log(value, id);\r\n            return {...todo, deadline: value}\r\n          }else {\r\n            return todo;\r\n          }\r\n        })\r\n        return {todos: updatedTodos}\r\n      })\r\n    }\r\n\r\n    updateItem(e) {\r\n      this.setState({\r\n        newItem: e.target.value\r\n      })\r\n    }\r\n\r\n    updateDeadline(e) {\r\n      this.setState({\r\n        deadline: e.target.value\r\n      })\r\n    }\r\n\r\n    deleteItem(id){\r\n      //debugger\r\n    const filteredItems= this.state.todos.filter(item =>\r\n      item.id!==id); //true: keep it, false means discard(delete)\r\n      this.setState({\r\n      todos: filteredItems\r\n    })\r\n  }\r\n\r\n  editItem(id) {\r\n    this.setState({\r\n      editing: id\r\n    })\r\n  }\r\n\r\n  handleFormSubmit(e) {\r\n    e.preventDefault();\r\n    const { todos, deadline } = this.state;\r\n    localStorage.setItem('todo', JSON.stringify([...todos]));\r\n    localStorage.setItem('deadline', deadline);\r\n  };\r\n\r\n  componentDidMount() {\r\n    const localData = localStorage.getItem('todo');\r\n    const result = localData ? localData : '';\r\n    console.log({result});\r\n    const deadlineData = localStorage.getItem('deadline');\r\n    this.setState({ result, deadlineData });\r\n  }\r\n\r\n\r\n\r\n    render() {\r\n        const todoItems = this.state.todos.map\r\n        (item =>\r\n          <TodoItem\r\n          key={item.id}\r\n          item={item}\r\n          handleChange={this.handleChange}\r\n          addTodo={this.addTodo}\r\n          deleteItem={this.deleteItem}\r\n          updateInput={this.updateInput}\r\n          updateInputDeadline={this.updateInputDeadline}\r\n          isEdited={this.state.editing === item.id}\r\n          editItem={this.editItem}\r\n        />)\r\n\r\n\r\n        return (\r\n          <div className=\"todo-list\">\r\n          <Timer />\r\n\r\n          <form onSubmit={this.handleFormSubmit}>\r\n            <div className=\"add-todo\">\r\n              <label>Add an item...</label>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type item here...\"\r\n                value={this.state.newItem}\r\n                onChange={this.updateItem}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"date\">\r\n              <label htmlFor=\"deadline\">Deadline</label>\r\n              <input\r\n                type=\"date\" id=\"start\" name=\"deadline\"\r\n                value={this.state.deadline}\r\n                onChange={this.updateDeadline}\r\n              />\r\n            </div>\r\n\r\n            <button onClick={this.addTodo}>Add to the list</button>\r\n          </form>\r\n\r\n            {todoItems.length === 0 ? <p>No items</p> : null}\r\n\r\n            <div className=\"todoitems\">\r\n              {todoItems}\r\n            </div>\r\n\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n*/\r\n\r\n\r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport TodoItem from \"./components/TodoItem\";\r\nimport todosData from \"./components/todosData\";\r\nimport Timer from \"./components/Timer\";\r\n//import FlipMove from \"react-flip-move\";\r\nimport { v4 as uuidv4 } from 'uuid'; //npm install uuid\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            todos: window.localStorage.getItem('todos') ? JSON.parse(window.localStorage.getItem('todos')) : [],\r\n            //setTodos: todosData,\r\n            id: uuidv4(),\r\n            newItem: \"\",\r\n            deadline: \"\",\r\n            editing: false\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.addTodo = this.addTodo.bind(this)\r\n        this.updateInput = this.updateInput.bind(this)\r\n        this.deleteItem = this.deleteItem.bind(this)\r\n        this.updateItem = this.updateItem.bind(this)\r\n        this.updateDeadline = this.updateDeadline.bind(this)\r\n        this.updateInputDeadline = this.updateInputDeadline.bind(this)\r\n        this.editItem = this.editItem.bind(this)\r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this)\r\n    }\r\n\r\n    handleChange(id) {\r\n      this.setState((prevState) => {\r\n        const updatedTodos = prevState.todos.map((todo) => {\r\n          if (todo.id === id) {\r\n            return { ...todo, completed: !todo.completed };\r\n          } else {\r\n            return todo;\r\n          }\r\n        });\r\n        localStorage.setItem('todos',JSON.stringify(updatedTodos))\r\n        return { todos: updatedTodos };\r\n      });\r\n    }\r\n\r\n    addTodo(e) {\r\n      //console.log(\"add todo\");\r\n      //e.preventDefault();\r\n      const newTodo = {\r\n        id: this.state.todos.length + 1,\r\n        text: this.state.newItem,  // text should match with the input box\r\n        completed: false,\r\n        deadline: this.state.deadline\r\n      }\r\n      const newTodos = this.state.todos.concat([newTodo]);\r\n      this.setState({\r\n        todos: newTodos,\r\n        newItem: \"\",\r\n        deadline: \"\",\r\n        id: uuidv4(),//id: this.state.todos.length + 1,\r\n        editing: false\r\n      })\r\n\r\n      localStorage.setItem('todos',JSON.stringify(newTodos))\r\n    }\r\n\r\n    updateInput(value, id) {\r\n        this.setState((prevState) => {\r\n        const updatedTodos = prevState.todos.map((todo) => {\r\n          if(todo.id === id) {\r\n            return {...todo, text: value}\r\n          }else {\r\n            return todo;\r\n          }\r\n        })\r\n        localStorage.setItem('todos',JSON.stringify(updatedTodos))\r\n        return {todos: updatedTodos}\r\n      })\r\n    }\r\n\r\n    updateInputDeadline(value, id) {\r\n      //console.log(value, id);\r\n        this.setState((prevState) => {\r\n        const updatedTodos = prevState.todos.map((todo) => {\r\n          if(todo.id === id) {\r\n            console.log(value, id);\r\n            return {...todo, deadline: value}\r\n          }else {\r\n            return todo;\r\n          }\r\n        })\r\n        localStorage.setItem('todos',JSON.stringify(updatedTodos))\r\n        return {todos: updatedTodos}  // update tpdps, need setItem\r\n      })\r\n    }\r\n\r\n    updateItem(e) {\r\n      this.setState({\r\n        newItem: e.target.value\r\n      })\r\n    }\r\n\r\n    updateDeadline(e) {\r\n      this.setState({\r\n        deadline: e.target.value\r\n      })\r\n    }\r\n\r\n    deleteItem(id){\r\n      //debugger\r\n    const filteredItems= this.state.todos.filter(item =>\r\n      item.id!==id); //true: keep it, false means discard(delete)\r\n      this.setState({\r\n      todos: filteredItems\r\n    })\r\n    localStorage.setItem('todos',JSON.stringify(filteredItems))\r\n  }\r\n\r\n\r\n\r\n  editItem(id) {\r\n    this.setState({\r\n      editing: id\r\n    })\r\n  }\r\n\r\n  handleFormSubmit(e) {\r\n    e.preventDefault();\r\n    // const newItem = {\r\n    //   todos: this.state.todos\r\n    // }\r\n    // const updatedItems = [...this.state.todos];\r\n    // console.log({updatedItems});\r\n\r\n    // window.localStorage.setItem('todos', JSON.stringify(updatedItems));\r\n\r\n    // this.setState({\r\n    //   newItem: \"\",\r\n    //   deadline: \"\",\r\n    //   id: uuidv4(),//id: this.state.todos.length + 1,\r\n    //   editing: false\r\n    // })\r\n  };\r\n\r\n  componentDidMount() {\r\n    const localData = localStorage.getItem('todo');\r\n    const result = localData ? localData : '';\r\n    console.log({result});\r\n    const deadlineData = localStorage.getItem('deadline');\r\n    this.setState({ result, deadlineData });\r\n  }\r\n\r\n    render() {\r\n        const todoItems = this.state.todos.map\r\n        (item =>\r\n          <TodoItem\r\n          key={item.id}\r\n          item={item}\r\n          handleChange={this.handleChange}\r\n          addTodo={this.addTodo}\r\n          deleteItem={this.deleteItem}\r\n          updateInput={this.updateInput}\r\n          updateInputDeadline={this.updateInputDeadline}\r\n          isEdited={this.state.editing === item.id}\r\n          editItem={this.editItem}\r\n        />)\r\n\r\n\r\n        return (\r\n          <div className=\"todo-list\">\r\n          <Timer />\r\n\r\n          <form onSubmit={this.handleFormSubmit}>\r\n            <div className=\"add-todo\">\r\n              <label>Add an item...</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"todo\"\r\n                placeholder=\"Type item here...\"\r\n                value={this.state.newItem}\r\n                onChange={this.updateItem}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"date\">\r\n              <label htmlFor=\"deadline\">Deadline</label>\r\n              <input\r\n                //type=\"text\"\r\n                type=\"date\" id=\"start\" name=\"deadline\"\r\n                min=\"2021-01-01\"\r\n                max=\"2024-12-31\"\r\n                value={this.state.deadline}\r\n                onChange={this.updateDeadline}\r\n              />\r\n            </div>\r\n\r\n            <button type=\"submit\" onClick={this.addTodo}>Add to the list</button>\r\n          </form>\r\n\r\n            {todoItems.length === 0 ? <p>No items</p> : null}\r\n\r\n            <div className=\"todoitems\">\r\n              {todoItems}\r\n            </div>\r\n\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}